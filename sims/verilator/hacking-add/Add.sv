// Generated by CIRCT firtool-1.75.0

// Include register initializers in init blocks unless synthesis is set
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Standard header to adapt well known macros for register randomization.

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_
module Add(	// @[generators/rocc-custom-bridge/src/main/scala/Add.scala:26:7]
  input         clock,	// @[generators/rocc-custom-bridge/src/main/scala/Add.scala:26:7]
  input         reset,	// @[generators/rocc-custom-bridge/src/main/scala/Add.scala:26:7]
  output        io_cmd_ready,	// @[generators/rocc-custom-bridge/src/main/scala/Add.scala:28:14]
  input         io_cmd_valid,	// @[generators/rocc-custom-bridge/src/main/scala/Add.scala:28:14]
  input  [4:0]  io_cmd_bits_inst_rd,	// @[generators/rocc-custom-bridge/src/main/scala/Add.scala:28:14]
  input  [63:0] io_cmd_bits_rs1,	// @[generators/rocc-custom-bridge/src/main/scala/Add.scala:28:14]
  input  [63:0] io_cmd_bits_rs2,	// @[generators/rocc-custom-bridge/src/main/scala/Add.scala:28:14]
  input         io_resp_ready,	// @[generators/rocc-custom-bridge/src/main/scala/Add.scala:28:14]
  output        io_resp_valid,	// @[generators/rocc-custom-bridge/src/main/scala/Add.scala:28:14]
  output [4:0]  io_resp_bits_rd,	// @[generators/rocc-custom-bridge/src/main/scala/Add.scala:28:14]
  output [63:0] io_resp_bits_data,	// @[generators/rocc-custom-bridge/src/main/scala/Add.scala:28:14]
  output        io_busy	// @[generators/rocc-custom-bridge/src/main/scala/Add.scala:28:14]
);

    // Print some stuff as an example
   initial begin
    if ($test$plusargs("trace") != 0) begin
         $display("[%0t] Tracing to logs/vlt_dump.vcd...\n", $time);
         $dumpfile("logs/vlt_dump.vcd");
         $dumpvars();
    end
    $display("[%0t] Model running...\n", $time);
   end

  reg  [4:0]  cmd_bits_reg_inst_rd;	// @[generators/rocc-custom-bridge/src/main/scala/Add.scala:47:29]
  reg  [63:0] cmd_bits_reg_rs1;	// @[generators/rocc-custom-bridge/src/main/scala/Add.scala:47:29]
  reg  [63:0] cmd_bits_reg_rs2;	// @[generators/rocc-custom-bridge/src/main/scala/Add.scala:47:29]
  reg         state_reg;	// @[generators/rocc-custom-bridge/src/main/scala/Add.scala:48:26]
  wire        _GEN = ~state_reg & io_cmd_valid;	// @[generators/rocc-custom-bridge/src/main/scala/Add.scala:48:26, :51:19, src/main/scala/chisel3/util/Decoupled.scala:51:35]
  always @(posedge clock) begin	// @[generators/rocc-custom-bridge/src/main/scala/Add.scala:26:7]
    if (reset) begin	// @[generators/rocc-custom-bridge/src/main/scala/Add.scala:26:7]
      cmd_bits_reg_inst_rd <= 5'h0;	// @[generators/rocc-custom-bridge/src/main/scala/Add.scala:47:29]
      cmd_bits_reg_rs1 <= 64'h0;	// @[generators/rocc-custom-bridge/src/main/scala/Add.scala:47:29]
      cmd_bits_reg_rs2 <= 64'h0;	// @[generators/rocc-custom-bridge/src/main/scala/Add.scala:47:29]
      state_reg <= 1'h0;	// @[generators/rocc-custom-bridge/src/main/scala/Add.scala:48:26]
    end
    else begin	// @[generators/rocc-custom-bridge/src/main/scala/Add.scala:26:7]
      if (~state_reg & _GEN) begin	// @[generators/rocc-custom-bridge/src/main/scala/Add.scala:47:29, :48:26, :57:{19,28}, :58:24, :60:20, src/main/scala/chisel3/util/Decoupled.scala:51:35]
        cmd_bits_reg_inst_rd <= io_cmd_bits_inst_rd;	// @[generators/rocc-custom-bridge/src/main/scala/Add.scala:47:29]
        cmd_bits_reg_rs1 <= io_cmd_bits_rs1;	// @[generators/rocc-custom-bridge/src/main/scala/Add.scala:47:29]
        cmd_bits_reg_rs2 <= io_cmd_bits_rs2;	// @[generators/rocc-custom-bridge/src/main/scala/Add.scala:47:29]
      end
      if (state_reg)	// @[generators/rocc-custom-bridge/src/main/scala/Add.scala:48:26]
        state_reg <= io_resp_ready & state_reg ^ state_reg;	// @[generators/rocc-custom-bridge/src/main/scala/Add.scala:48:26, :63:25, :64:17, src/main/scala/chisel3/util/Decoupled.scala:51:35]
      else	// @[generators/rocc-custom-bridge/src/main/scala/Add.scala:48:26]
        state_reg <= _GEN ^ state_reg;	// @[generators/rocc-custom-bridge/src/main/scala/Add.scala:48:26, :58:24, :59:17, src/main/scala/chisel3/util/Decoupled.scala:51:35]
    end
  end // always @(posedge)
/*
  `ifdef ENABLE_INITIAL_REG_	// @[generators/rocc-custom-bridge/src/main/scala/Add.scala:26:7]
    `ifdef FIRRTL_BEFORE_INITIAL	// @[generators/rocc-custom-bridge/src/main/scala/Add.scala:26:7]
      `FIRRTL_BEFORE_INITIAL	// @[generators/rocc-custom-bridge/src/main/scala/Add.scala:26:7]
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:5];	// @[generators/rocc-custom-bridge/src/main/scala/Add.scala:26:7]
    initial begin	// @[generators/rocc-custom-bridge/src/main/scala/Add.scala:26:7]
      `ifdef INIT_RANDOM_PROLOG_	// @[generators/rocc-custom-bridge/src/main/scala/Add.scala:26:7]
        `INIT_RANDOM_PROLOG_	// @[generators/rocc-custom-bridge/src/main/scala/Add.scala:26:7]
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// @[generators/rocc-custom-bridge/src/main/scala/Add.scala:26:7]
        for (logic [2:0] i = 3'h0; i < 3'h6; i += 3'h1) begin
          _RANDOM[i] = `RANDOM;	// @[generators/rocc-custom-bridge/src/main/scala/Add.scala:26:7]
        end	// @[generators/rocc-custom-bridge/src/main/scala/Add.scala:26:7]
        cmd_bits_reg_inst_rd = _RANDOM[3'h0][24:20];	// @[generators/rocc-custom-bridge/src/main/scala/Add.scala:26:7, :47:29]
        cmd_bits_reg_rs1 = {_RANDOM[3'h1], _RANDOM[3'h2]};	// @[generators/rocc-custom-bridge/src/main/scala/Add.scala:26:7, :47:29]
        cmd_bits_reg_rs2 = {_RANDOM[3'h3], _RANDOM[3'h4]};	// @[generators/rocc-custom-bridge/src/main/scala/Add.scala:26:7, :47:29]
        state_reg = _RANDOM[3'h5][0];	// @[generators/rocc-custom-bridge/src/main/scala/Add.scala:26:7, :48:26]
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// @[generators/rocc-custom-bridge/src/main/scala/Add.scala:26:7]
      `FIRRTL_AFTER_INITIAL	// @[generators/rocc-custom-bridge/src/main/scala/Add.scala:26:7]
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  */
  assign io_cmd_ready = ~state_reg;	// @[generators/rocc-custom-bridge/src/main/scala/Add.scala:26:7, :48:26, :51:19]
  assign io_resp_valid = state_reg;	// @[generators/rocc-custom-bridge/src/main/scala/Add.scala:26:7, :48:26]
  assign io_resp_bits_rd = cmd_bits_reg_inst_rd;	// @[generators/rocc-custom-bridge/src/main/scala/Add.scala:26:7, :47:29]
  assign io_resp_bits_data = cmd_bits_reg_rs1 + cmd_bits_reg_rs2;	// @[generators/rocc-custom-bridge/src/main/scala/Add.scala:26:7, :47:29, :69:41]
  assign io_busy = state_reg;	// @[generators/rocc-custom-bridge/src/main/scala/Add.scala:26:7, :48:26]
endmodule

